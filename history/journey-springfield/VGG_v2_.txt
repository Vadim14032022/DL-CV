Epoch 0 {'train': {'loss': 1.4765656370423563, 'acc': 0.6424220709423146}, 'val': {'loss': 0.8950552644124884, 'acc': 0.7752567470742775}} 
Epoch 1 {'train': {'loss': 0.3092955401765464, 'acc': 0.9466738325570285}, 'val': {'loss': 0.7566042826316338, 'acc': 0.8165751134463817}} 
Epoch 2 {'train': {'loss': 0.12276884393247527, 'acc': 0.9928341096381226}, 'val': {'loss': 0.7429026054943094, 'acc': 0.8206352997372821}} 
Epoch 3 {'train': {'loss': 0.05949751072492378, 'acc': 0.9993431267168279}, 'val': {'loss': 0.7168526113360715, 'acc': 0.8239789825650824}} 
Epoch 4 {'train': {'loss': 0.034774723672872515, 'acc': 0.9999402842469843}, 'val': {'loss': 0.7093773672140553, 'acc': 0.8258896584666826}} 

================================================================
Total params: 10,458,730
Trainable params: 1,053,738
Non-trainable params: 9,404,992
----------------------------------------------------------------
Input size (MB): 0.57
Forward/backward pass size (MB): 198.68
Params size (MB): 39.90
Estimated Total Size (MB): 239.15
----------------------------------------------------------------
None
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (16): ReLU(inplace=True)
    (17): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (20): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): ReLU(inplace=True)
    (22): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (23): ReLU(inplace=True)
    (24): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=42, bias=True)
  )
)
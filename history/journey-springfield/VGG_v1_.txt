[{'train': {'loss': 1.7261806688441976, 'acc': 0.5398304072614356}, 'val': {'loss': 0.9612968209850665, 'acc': 0.7528063052304753}}, {'train': {'loss': 0.5345071934534631, 'acc': 0.8545921414069031}, 'val': {'loss': 0.7776052768386461, 'acc': 0.7948411750656795}}, {'train': {'loss': 0.14458909724563962, 'acc': 0.961423623551893}, 'val': {'loss': 0.7072048914554953, 'acc': 0.8280391688559828}}, {'train': {'loss': 0.052937845332543795, 'acc': 0.9865042398184641}, 'val': {'loss': 0.7907686067390532, 'acc': 0.8144256030570814}}, {'train': {'loss': 0.04417387560930601, 'acc': 0.9879971336438552}, 'val': {'loss': 0.8408075581950449, 'acc': 0.8082159063768808}}, {'train': {'loss': 0.04881630116745751, 'acc': 0.9854890720171982}, 'val': {'loss': 0.7963387274018956, 'acc': 0.8239789825650824}}, {'train': {'loss': 0.043054733208926665, 'acc': 0.9877582706317927}, 'val': {'loss': 0.9826880973593158, 'acc': 0.7950800095533795}}, {'train': {'loss': 0.019272427305062567, 'acc': 0.9947450137346232}, 'val': {'loss': 0.7480823207234665, 'acc': 0.8409362311917841}}, {'train': {'loss': 0.010121325027864085, 'acc': 0.9976710856323898}, 'val': {'loss': 0.7518629086510162, 'acc': 0.8428469070933843}}, {'train': {'loss': 0.006174084810600922, 'acc': 0.9989251164457184}, 'val': {'loss': 0.757322948005167, 'acc': 0.8438022450441843}}]

VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU(inplace=True)
    (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU(inplace=True)
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU(inplace=True)
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU(inplace=True)
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU(inplace=True)
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (16): ReLU(inplace=True)
    (17): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): ReLU(inplace=True)
    (19): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (20): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): ReLU(inplace=True)
    (22): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (23): ReLU(inplace=True)
    (24): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=42, bias=True)
  )
)
================================================================
Total params: 129,122,922
Trainable params: 119,717,930
Non-trainable params: 9,404,992
----------------------------------------------------------------
Input size (MB): 0.57
Forward/backward pass size (MB): 198.87
Params size (MB): 492.56
Estimated Total Size (MB): 692.01
----------------------------------------------------------------